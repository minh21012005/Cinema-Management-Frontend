import { useState, useEffect } from "react";
import { Table, Button, Tag, Space, message, Tabs } from "antd";
import { MessageOutlined } from "@ant-design/icons";
import {
    getSupportSessionsAPI,
    assignSupportSessionAPI,
} from "@/services/api.service";
import SupportChatPopup from "./SupportChatPopup"; // üëà th√™m component popup ri√™ng

const ChatSessionListPage = () => {
    const [sessions, setSessions] = useState([]);
    const [loading, setLoading] = useState(false);
    const [activeTab, setActiveTab] = useState("OPEN");
    const [activeSession, setActiveSession] = useState(null); // üëà phi√™n ƒëang m·ªü chat

    useEffect(() => {
        fetchSessions();
    }, [activeTab]);

    const fetchSessions = async () => {
        setLoading(true);
        try {
            const res = await getSupportSessionsAPI({ status: activeTab });
            setSessions(res.data || []);
        } catch {
            message.error("Kh√¥ng th·ªÉ t·∫£i danh s√°ch phi√™n!");
        } finally {
            setLoading(false);
        }
    };

    const handleAssign = async (sessionId) => {
        try {
            await assignSupportSessionAPI(sessionId);
            message.success("ƒê√£ ti·∫øp nh·∫≠n phi√™n h·ªó tr·ª£!");
            fetchSessions();
        } catch {
            message.error("Kh√¥ng th·ªÉ ti·∫øp nh·∫≠n phi√™n!");
        }
    };

    const handleOpenChat = (session) => {
        setActiveSession(session); // üëà m·ªü popup chat trong c√πng trang
    };

    const handleCloseChat = () => {
        setActiveSession(null);
    };

    const columns = [
        { title: "M√£ phi√™n", dataIndex: "sessionId", key: "sessionId" },
        { title: "Kh√°ch h√†ng", dataIndex: "customerName", key: "customerName" },
        { title: "Tin nh·∫Øn cu·ªëi", dataIndex: "lastMessage", key: "lastMessage" },
        {
            title: "Tr·∫°ng th√°i",
            dataIndex: "status",
            key: "status",
            render: (text) => {
                switch (text) {
                    case "OPEN": return <Tag color="orange">Ch∆∞a ti·∫øp nh·∫≠n</Tag>;
                    case "ASSIGNED": return <Tag color="green">ƒêang h·ªó tr·ª£</Tag>;
                    case "CLOSED": return <Tag color="gray">ƒê√£ k·∫øt th√∫c</Tag>;
                    default: return text;
                }
            },
        },
        {
            title: "Thao t√°c",
            key: "action",
            render: (_, record) => (
                <Space>
                    {record.status === "OPEN" && (
                        <Button
                            icon={<MessageOutlined />}
                            type="primary"
                            size="small"
                            onClick={() => handleAssign(record.sessionId)}
                        >
                            Ti·∫øp nh·∫≠n
                        </Button>
                    )}
                    {record.status === "ASSIGNED" && (
                        <Button
                            icon={<MessageOutlined />}
                            size="small"
                            onClick={() => handleOpenChat(record)} // üëà m·ªü khung chat
                        >
                            M·ªü chat
                        </Button>
                    )}
                </Space>
            ),
        },
    ];

    return (
        <div style={{ position: "relative" }}>
            <h2 style={{ marginBottom: 16 }}>üí¨ Qu·∫£n l√Ω phi√™n h·ªó tr·ª£</h2>
            <Tabs
                activeKey={activeTab}
                onChange={(key) => setActiveTab(key)}
                items={[
                    { key: "OPEN", label: "ƒêang ch·ªù x·ª≠ l√Ω" },
                    { key: "ASSIGNED", label: "ƒêang h·ªó tr·ª£" },
                    { key: "CLOSED", label: "ƒê√£ k·∫øt th√∫c" },
                ]}
            />
            <Table
                columns={columns}
                dataSource={sessions}
                rowKey="sessionId"
                loading={loading}
                bordered
                pagination={false}
            />

            {/* Popup chat n·ªïi */}
            {activeSession && (
                <SupportChatPopup
                    session={activeSession}
                    onClose={handleCloseChat}
                />
            )}
        </div>
    );
};

export default ChatSessionListPage;